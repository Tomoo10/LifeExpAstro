---
// src/pages/index.astro (or graph.astro––just be sure it’s in your pages folder)
export const prerender = true;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Your Life at a Glance</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/styles/global.css">
  </head>
  <body>
    <div class="page">
      <div class="graphs">
        <div class="container-graph">
          <div class="desc">
            <h1 class="title-name">Your Life at a Glance</h1>
            <div class="block-exp">
              <div class="block lived"></div>
              <p class="exp">Weeks Already Lived 生きた時間</p>
            </div>
            <div class="block-exp">
              <div class="block work"></div>
              <p class="exp">Weeks at School/Work 働く時間</p>
            </div>
            <div class="block-exp">
              <div class="block sleep"></div>
              <p class="exp">Weeks You Sleep 寝る時間</p>
            </div>
            <div class="block-exp">
              <div class="block phone"></div>
              <p class="exp">Weeks on Your Phone スマホを使用する時間</p>
            </div>
            <div class="block-exp">
              <div class="block free"></div>
              <p class="exp">Weeks Left to Spend on What Truly Matters あなたの自由な時間</p>
            </div>
          </div>
          <div id="blockArea" class="block-container"></div>
        </div>

        <div class="container-data">
          <h1 class="title">Stats</h1>
          <div id="stats"></div>

          <h1 class="title">Life Lost to Your Screen</h1>
          <p id="screen-loss" class="para-data"></p>
        </div>
      </div>
    </div>

    <script type="module">
      document.addEventListener('DOMContentLoaded', async () => {
        // 1) fetch the JSON
        const data = await fetch('/data/life_exp.json').then(r => r.json());
    
        // 2) pull from URL and compute weeks & order
        const params = new URLSearchParams(location.search);
        const age        = +params.get('age')    || 0;
        const device     = +params.get('device') || 0;
        const gender     = params.get('gender')  || '';
        const countryKey = (params.get('country')||'').toUpperCase();
        const school     = +params.get('school') || 0;
        const sleep      = +params.get('sleep')  || 0;
    
        const country = data.find(c => c.initial === countryKey);
        if (!country) {
          console.error(`Unknown country code: ${countryKey}`);
          return;
        }
    
        const deathAge   = gender === 'male'
          ? country.male_life_expectancy
          : country.female_life_expectancy;
        const totalWeeks = Math.floor(deathAge * 52);
        const lived      = Math.floor(age   * 52);
        const rem        = totalWeeks - lived;
        const phone      = Math.floor((device * 7 * rem) / 168);
        const sleepW     = Math.floor((sleep  * 7 * rem) / 168);
        const work       = Math.floor((school * 7 * rem) / 168);
        const free       = totalWeeks - (lived + phone + sleepW + work);
    
        const weeks = { lived, work, sleep: sleepW, phone, free };
        const order = [
          ['lived', 'lived'],
          ['work',  'work'],
          ['sleep', 'sleep'],
          ['phone', 'phone'],
          ['free',  'free']
        ];
    
        // 3) now that the DOM is ready, select and append
        const blockArea = document.getElementById('blockArea');
        if (!blockArea) {
          console.error('👀 #blockArea not found in DOM');
          return;
        }
    
        order.forEach(([key, cls]) => {
          for (let i = 0; i < weeks[key]; i++) {
            const b = document.createElement('div');
            b.className = `block ${cls}`;
            blockArea.appendChild(b);
          }
        });
      });
    </script>
  </body>
</html>